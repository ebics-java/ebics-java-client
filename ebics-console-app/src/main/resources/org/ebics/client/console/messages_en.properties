 #
 # Copyright (c) 1990-2012 kopiLeft Development SARL
 #
 # This library is free software; you can redistribute it and/or
 # modify it under the terms of the GNU Lesser General Public
 # License version 2.1 as published by the Free Software Foundation.
 #
 # This library is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 # Lesser General Public License for more details.
 #
 # You should have received a copy of the GNU Lesser General Public
 # License along with this library; if not, write to the Free Software
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 #
 # $Id: messages_en.properties 2 2012-02-28 09:39:55Z bentaher $
 #
 
unknown.admin.ordertype = Unknown admin ordertype: {0}.

download.file.error = Cannot download the requested file
download.date.error = Cannot parse download date {0}
btf.parse.error  = Cannot parse BTF from string {0}. Input is not matching given reg-exp patter: SERVICE NAME:[OPTION]:[SCOPE]:[container]:message name:[variant]:[version]:[FORMAT]

hia.request.send = Sending authentication and encryption certificates for {0} user
hia.send.error   = The authentication and encryption certificates has not been sent for the {0} user
hia.send.success = The authentication and encryption certificates has been sent correctly for {0} user

hpb.request.send = Retrieving the public bank keys for {0} user
hpb.send.error   = Cannot retrieve the bank public keys for {0} user
hpb.send.success = The bank public keys has been retrieved correctly for the {0} user

ini.request.send   = Sending the signature certificate for user {0}
ini.send.error     = The signature certificate cannot be sent for the {0} user
ini.send.success   = The signature certificate has been sent correctly for the {0} user

upload.file.error = Cannot upload file {0} to the ebics server

user.already.hia.initialized = The authentication and encryption certificates has already been sent for the {0} user
user.already.initialized     = The signature certificate has already been sent for the {0} user
list.user.ids                 = Displaying list of user IDs: {0}
list.bank.ids                 = Displaying list of bank IDs: {0}
list.partner.ids              = Displaying list of partner IDs: {0}

spr.request.send             = Locking the user {0}
spr.send.error               = Error while locking the user {0}
spr.send.success             = The user {0} is now locked. Initializations steps should be done again  